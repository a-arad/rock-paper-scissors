name: Claude Assistant
on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

permissions:
  contents: write
  issues: write
  pull-requests: write
  actions: read

jobs:
  handle-span-commands:
    if: contains(github.event.comment.body, '@span') || contains(github.event.issue.body, '@span')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          
      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-span-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Build span CLI
        run: |
          if [ -f "Cargo.toml" ]; then
            cargo build --release
            sudo cp target/release/span /usr/local/bin/span
          else
            echo "Span source not found in repository"
          fi
          
      - name: Handle Span Command
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          OR_API_KEY: ${{ secrets.OR_API_KEY }}
        uses: actions/github-script@v7
        with:
          script: |
            const comment = context.payload.comment?.body || context.payload.issue?.body || '';
            const spanCommandRegex = /@span\s+(\w+)\s*(.*)/g;
            let match;
            
            while ((match = spanCommandRegex.exec(comment)) !== null) {
              const command = match[1];
              const args = match[2].trim();
              
              console.log(`Found @span command: ${command} with args: ${args}`);
              
              try {
                switch (command.toLowerCase()) {
                  case 'retry':
                    await handleRetryCommand(args);
                    break;
                  case 'resume':
                    await handleResumeCommand(args);
                    break;
                  case 'modify':
                    await handleModifyCommand(args);
                    break;
                  case 'skip':
                    await handleSkipCommand(args);
                    break;
                  default:
                    await github.rest.issues.createComment({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: context.issue.number,
                      body: `‚ùì Unknown @span command: **${command}**\n\nAvailable commands:\n- \`@span retry <task-id> with: <guidance>\`\n- \`@span resume <task-id>\`\n- \`@span modify <task-id>: <new-requirements>\`\n- \`@span skip <task-id>: <reason>\``
                    });
                }
              } catch (error) {
                console.error(`Error handling @span ${command}:`, error);
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: `‚ùå Error executing @span ${command}: ${error.message}`
                });
              }
            }
            
            async function handleRetryCommand(args) {
              const retryMatch = args.match(/^(\S+)\s+with:\s*(.+)$/);
              if (!retryMatch) {
                throw new Error('Retry command format: `@span retry <task-id> with: <guidance>`');
              }
              
              const [, taskId, guidance] = retryMatch;
              
              await github.rest.repos.createDispatchEvent({
                owner: context.repo.owner,
                repo: context.repo.repo,
                event_type: 'span-retry',
                client_payload: {
                  task_id: taskId,
                  guidance: guidance,
                  triggered_by: 'user-command',
                  issue_number: context.issue.number
                }
              });
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `üîÑ **Retry initiated** for task **${taskId}**\n\nGuidance: ${guidance}\n\nMonitor progress in the [Actions tab](https://github.com/${context.repo.owner}/${context.repo.repo}/actions).`
              });
            }
            
            async function handleResumeCommand(args) {
              const taskId = args.trim();
              if (!taskId) {
                throw new Error('Resume command format: `@span resume <task-id>`');
              }
              
              // Mark task as completed manually
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `[Span] Task ${taskId} completed (manual)`,
                body: `‚úÖ Task marked as completed manually by user.\n\nTriggered from issue #${context.issue.number}`,
                labels: ['span-completed', 'manual-completion']
              });
              
              // Trigger coordination
              await github.rest.repos.createDispatchEvent({
                owner: context.repo.owner,
                repo: context.repo.repo,
                event_type: 'span-coordinate',
                client_payload: {
                  completed_task: taskId,
                  triggered_by: 'manual-resume'
                }
              });
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `‚úÖ **Task resumed** - **${taskId}** marked as completed\n\nDependency coordination triggered to unblock waiting tasks.`
              });
            }
            
            async function handleModifyCommand(args) {
              const modifyMatch = args.match(/^(\S+):\s*(.+)$/);
              if (!modifyMatch) {
                throw new Error('Modify command format: `@span modify <task-id>: <new-requirements>`');
              }
              
              const [, taskId, newRequirements] = modifyMatch;
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `üìù **Task modification requested** for **${taskId}**\n\nNew requirements: ${newRequirements}\n\n‚ö†Ô∏è **Note**: Modifying task requirements requires manual update of \`.span/tasks/${taskId}.md\` and re-triggering the task.`
              });
            }
            
            async function handleSkipCommand(args) {
              const skipMatch = args.match(/^(\S+):\s*(.+)$/);
              if (!skipMatch) {
                throw new Error('Skip command format: `@span skip <task-id>: <reason>`');
              }
              
              const [, taskId, reason] = skipMatch;
              
              // Mark task as skipped
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `[Span] Task ${taskId} skipped`,
                body: `‚è≠Ô∏è Task skipped by user.\n\nReason: ${reason}\n\nTriggered from issue #${context.issue.number}`,
                labels: ['span-skipped', 'user-action']
              });
              
              // Trigger coordination to unblock dependents
              await github.rest.repos.createDispatchEvent({
                owner: context.repo.owner,
                repo: context.repo.repo,
                event_type: 'span-coordinate',
                client_payload: {
                  completed_task: taskId,
                  triggered_by: 'user-skip'
                }
              });
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `‚è≠Ô∏è **Task skipped** - **${taskId}**\n\nReason: ${reason}\n\nDependency coordination triggered to unblock waiting tasks.`
              });
            }

  claude-response:
    if: "!contains(github.event.comment.body, '@span') && !contains(github.event.issue.body, '@span')"
    runs-on: ubuntu-latest
    steps:
      - uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
